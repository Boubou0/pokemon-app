name: Docker Image CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Run Docker image
      run: docker compose up -d
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Publish Docker image
      run: |
        docker build -t poke-app:latest .
        docker tag poke-app:latest fabrien/poke-app:latest
        echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
        docker push fabrien/poke-app:latest
    - name: Tag and Push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Récupérer tous les tags existants et vérifier s'il y en a
        TAGS=$(git tag)
        if [ -z "$TAGS" ]; then
          echo "Aucun tag trouvé. Initialisation à 0.1.0."
          NEW_TAG="0.1.0"
        else
          # Récupérer le dernier tag basé sur le versioning sémantique
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          # Incrémente le patch version
          NEW_TAG=$(echo $LAST_TAG | awk -F. -v OFS=. '{$NF = $NF + 1; print}')
        fi

        # Configurer les informations de l'utilisateur Git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Créer le nouveau tag et le pousser
        git tag $NEW_TAG
        git push origin $NEW_TAG

        echo "Nouveau tag créé et poussé: $NEW_TAG"
